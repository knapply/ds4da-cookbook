[
["index.html", "ds4da Cookbook Recipes for Success Welcome", " ds4da Cookbook Recipes for Success Brendan Knapp and Christopher Callaghan 2020-09-25 Welcome Test &lt;- == != test &lt;- &quot;face&quot; "],
["preface.html", "Preface", " Preface init "],
["setup-r-and-rstudio.html", "1 R and RStudio 1.1 R 1.2 RStudio", " 1 R and RStudio 1.1 R 1.1.1 Installation https://cran.r-project.org/ 1.2 RStudio 1.2.1 Installation https://rstudio.com/products/rstudio/download/ "],
["tabular-data.html", "2 Tabular Data 2.1 Basics 2.2 Common Pitfalls", " 2 Tabular Data Aliases: Tabular files Flat Delimited Includes: Comma-Separated Value (.csv) Tab-Separated Value (.tsv) 2.1 Basics library(readr) Here’s some example data, modified from http://www.gapminder.org/data/ country,continent,year,lifeExp,pop,gdpPercap # header/column names, separated by commas Afghanistan,Asia,1952,28.801,8425333,779.4453145 Afghanistan,Asia,1957,30.332,9240934,820.8530296 # comma-separated values Afghanistan,Asia,1962,31.997,10267083,853.10071 Afghanistan,Asia,1967,34.02,11537966,836.1971382 Afghanistan,Asia,1972,36.088,13079460,739.9811058 Afghanistan,Asia,1977,38.438,14880372,786.11336 Afghanistan,Asia,1982,39.854,12881816,978.0114388 Afghanistan,Asia,1987,40.822,13867957,852.3959448 csv_text &lt;- &#39;country,continent,year,lifeExp,pop,gdpPercap Afghanistan,Asia,1952,28.801,8425333,779.4453145 Afghanistan,Asia,1957,30.332,9240934,820.8530296 Afghanistan,Asia,1962,31.997,10267083,853.10071 Afghanistan,Asia,1967,34.02,11537966,836.1971382 Afghanistan,Asia,1972,36.088,13079460,739.9811058 Afghanistan,Asia,1977,38.438,14880372,786.11336 Afghanistan,Asia,1982,39.854,12881816,978.0114388 Afghanistan,Asia,1987,40.822,13867957,852.3959448&#39; csv_file &lt;- tempfile(fileext = &quot;.csv&quot;) csv_file # a temporary file path ## [1] &quot;/tmp/RtmpvuZSAF/file7cf8340d8eef.csv&quot; writeLines(text = csv_text, con = csv_file) # write `csv_text` to `csv_file` read_csv(file = csv_file) ## Parsed with column specification: ## cols( ## country = col_character(), ## continent = col_character(), ## year = col_double(), ## lifeExp = col_double(), ## pop = col_double(), ## gdpPercap = col_double() ## ) ## # A tibble: 8 x 6 ## country continent year lifeExp pop gdpPercap ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Afghanistan Asia 1952 28.8 8425333 779. ## 2 Afghanistan Asia 1957 30.3 9240934 821. ## 3 Afghanistan Asia 1962 32.0 10267083 853. ## 4 Afghanistan Asia 1967 34.0 11537966 836. ## 5 Afghanistan Asia 1972 36.1 13079460 740. ## 6 Afghanistan Asia 1977 38.4 14880372 786. ## 7 Afghanistan Asia 1982 39.9 12881816 978. ## 8 Afghanistan Asia 1987 40.8 13867957 852. You may encounter Tab-Delimited data where values are separated by \\t instead of ,. Instead of readr::read_csv(), we can use readr::read_tsv(). tsv_text &lt;- &#39;country\\tcontinent\\tyear\\tlifeExp\\tpop\\tgdpPercap Afghanistan\\tAsia\\t1952\\t28.801\\t8425333\\t779.4453145 Afghanistan\\tAsia\\t1957\\t30.332\\t9240934\\t820.8530296 Afghanistan\\tAsia\\t1962\\t31.997\\t10267083\\t853.10071 Afghanistan\\tAsia\\t1967\\t34.02\\t11537966\\t836.1971382 Afghanistan\\tAsia\\t1972\\t36.088\\t13079460\\t739.9811058 Afghanistan\\tAsia\\t1977\\t38.438\\t14880372\\t786.11336 Afghanistan\\tAsia\\t1982\\t39.854\\t12881816\\t978.0114388 Afghanistan\\tAsia\\t1987\\t40.822\\t13867957\\t852.3959448&#39; tsv_file &lt;- tempfile(fileext = &quot;.tsv&quot;) writeLines(text = tsv_text, con = tsv_file) read_tsv(file = tsv_file) ## Parsed with column specification: ## cols( ## country = col_character(), ## continent = col_character(), ## year = col_double(), ## lifeExp = col_double(), ## pop = col_double(), ## gdpPercap = col_double() ## ) ## # A tibble: 8 x 6 ## country continent year lifeExp pop gdpPercap ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Afghanistan Asia 1952 28.8 8425333 779. ## 2 Afghanistan Asia 1957 30.3 9240934 821. ## 3 Afghanistan Asia 1962 32.0 10267083 853. ## 4 Afghanistan Asia 1967 34.0 11537966 836. ## 5 Afghanistan Asia 1972 36.1 13079460 740. ## 6 Afghanistan Asia 1977 38.4 14880372 786. ## 7 Afghanistan Asia 1982 39.9 12881816 978. ## 8 Afghanistan Asia 1987 40.8 13867957 852. If we find ourselves reading delmited data that uses something other than \\t or , to separate values, we can use readr::read_delim(). pipe_separated_values_text &lt;- &#39;country|continent|year|lifeExp|pop|gdpPercap Afghanistan|Asia|1952|28.801|8425333|779.4453145 Afghanistan|Asia|1957|30.332|9240934|820.8530296 Afghanistan|Asia|1962|31.997|10267083|853.10071 Afghanistan|Asia|1967|34.02|11537966|836.1971382 Afghanistan|Asia|1972|36.088|13079460|739.9811058 Afghanistan|Asia|1977|38.438|14880372|786.11336 Afghanistan|Asia|1982|39.854|12881816|978.0114388 Afghanistan|Asia|1987|40.822|13867957|852.3959448&#39; psv_file &lt;- tempfile(fileext = &quot;.tsv&quot;) writeLines(text = pipe_separated_values_text, con = psv_file) read_delim(file = psv_file, delim = &quot;|&quot;) ## Parsed with column specification: ## cols( ## country = col_character(), ## continent = col_character(), ## year = col_double(), ## lifeExp = col_double(), ## pop = col_double(), ## `gdpPercap ` = col_double() ## ) ## # A tibble: 8 x 6 ## country continent year lifeExp pop `gdpPercap ` ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Afghanistan Asia 1952 28.8 8425333 779. ## 2 Afghanistan Asia 1957 30.3 9240934 821. ## 3 Afghanistan Asia 1962 32.0 10267083 853. ## 4 Afghanistan Asia 1967 34.0 11537966 836. ## 5 Afghanistan Asia 1972 36.1 13079460 740. ## 6 Afghanistan Asia 1977 38.4 14880372 786. ## 7 Afghanistan Asia 1982 39.9 12881816 978. ## 8 Afghanistan Asia 1987 40.8 13867957 852. country,continent,year,lifeExp,pop,gdpPercap # header/column names Afghanistan,Asia,1952,28.801,8425333,779.4453145 Afghanistan,Asia,1957,30.332,9240934,820.8530296 Afghanistan,Asia,1962,31.997,10267083,853.10071 Afghanistan,Asia,1967,34.02,11537966,836.1971382 Afghanistan,Asia,1972,36.088,13079460,739.9811058 Afghanistan,Asia,1977,38.438,14880372,786.11336 Afghanistan,Asia,1982,39.854,12881816,978.0114388 Afghanistan,Asia,1987,40.822,13867957,852.3959448 Afghanistan,,,N/A,, # notice that we&#39;re missing values csv_text &lt;- &#39;country,continent,year,lifeExp,pop,gdpPercap Afghanistan,Asia,1952,28.801,8425333,779.4453145 Afghanistan,Asia,1957,30.332,9240934,820.8530296 Afghanistan,Asia,1962,31.997,10267083,853.10071 Afghanistan,Asia,1967,34.02,11537966,836.1971382 Afghanistan,Asia,1972,36.088,13079460,739.9811058 Afghanistan,Asia,1977,38.438,14880372,786.11336 Afghanistan,Asia,1982,39.854,12881816,978.0114388 Afghanistan,Asia,1987,40.822,13867957,852.3959448 Afghanistan,,,N/A,,&#39; csv_file &lt;- tempfile(fileext = &quot;.csv&quot;) writeLines(text = csv_text, con = csv_file) 2.2 Common Pitfalls 2.2.1 Incorrect Column Types data_frame_from_csv &lt;- read_csv(file = csv_file) ## Parsed with column specification: ## cols( ## country = col_character(), ## continent = col_character(), ## year = col_double(), ## lifeExp = col_character(), ## pop = col_double(), ## gdpPercap = col_double() ## ) data_frame_from_csv ## # A tibble: 9 x 6 ## country continent year lifeExp pop gdpPercap ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Afghanistan Asia 1952 28.801 8425333 779. ## 2 Afghanistan Asia 1957 30.332 9240934 821. ## 3 Afghanistan Asia 1962 31.997 10267083 853. ## 4 Afghanistan Asia 1967 34.02 11537966 836. ## 5 Afghanistan Asia 1972 36.088 13079460 740. ## 6 Afghanistan Asia 1977 38.438 14880372 786. ## 7 Afghanistan Asia 1982 39.854 12881816 978. ## 8 Afghanistan Asia 1987 40.822 13867957 852. ## 9 Afghanistan &lt;NA&gt; NA N/A NA NA Notice that our year column says &lt;dbl&gt;, referring to it being of type double, yet all of our year values are whole numbers. typeof(data_frame_from_csv$year) ## [1] &quot;double&quot; data_frame_from_csv$year ## [1] 1952 1957 1962 1967 1972 1977 1982 1987 NA We also have \"N/A\" in our lifeExp column, forcing R to interpret all lifeExp values as characters (&lt;chr&gt;). typeof(data_frame_from_csv$lifeExp) ## [1] &quot;character&quot; data_frame_from_csv$lifeExp ## [1] &quot;28.801&quot; &quot;30.332&quot; &quot;31.997&quot; &quot;34.02&quot; &quot;36.088&quot; &quot;38.438&quot; &quot;39.854&quot; &quot;40.822&quot; &quot;N/A&quot; 2.2.1.1 Solution read_csv( file = csv_file, col_types = cols( country = col_character(), continent = col_character(), year = col_integer(), # read `year` as `integer` lifeExp = col_double(), # read `lifeExp` as `double` pop = col_double(), gdpPercap = col_double() ), na = c(&quot;&quot;, &quot;N/A&quot;) # be explicit about how `csv_file` represents missing values ) ## # A tibble: 9 x 6 ## country continent year lifeExp pop gdpPercap ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Afghanistan Asia 1952 28.8 8425333 779. ## 2 Afghanistan Asia 1957 30.3 9240934 821. ## 3 Afghanistan Asia 1962 32.0 10267083 853. ## 4 Afghanistan Asia 1967 34.0 11537966 836. ## 5 Afghanistan Asia 1972 36.1 13079460 740. ## 6 Afghanistan Asia 1977 38.4 14880372 786. ## 7 Afghanistan Asia 1982 39.9 12881816 978. ## 8 Afghanistan Asia 1987 40.8 13867957 852. ## 9 Afghanistan &lt;NA&gt; NA NA NA NA "],
["manipulating-data-frames.html", "3 Manipulating Data Frames 3.1 select() Columns 3.2 filter() Rows 3.3 arrange() Rows", " 3 Manipulating Data Frames library(tidyverse, warn.conflicts = FALSE) ## ── Attaching packages ───────────────────────────────────────────────────────────────────── tidyverse 1.3.0 ── ## ✓ ggplot2 3.3.2 ✓ purrr 0.3.4 ## ✓ tibble 3.0.3 ✓ dplyr 1.0.2 ## ✓ tidyr 1.1.2 ✓ stringr 1.4.0 ## ✓ readr 1.3.1 ✓ forcats 0.5.0 ## ── Conflicts ──────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() df &lt;- tibble( group = c(&quot;a&quot;, &quot;a&quot;, &quot;b&quot;, &quot;b&quot;, &quot;b&quot;), a = c(1, 4, NA, 3, 5), b = c(9, NA, 8, 10, 7), c = c(TRUE, FALSE, NA, FALSE, TRUE), d = c(LETTERS[1:3], NA, LETTERS[[5]]), e = factor(1:5, labels = c(&quot;tiny&quot;, &quot;small&quot;, &quot;medium&quot;, &quot;big&quot;, &quot;huge&quot;)), f_col = c(as.Date(NA), as.Date(&quot;2020-09-23&quot;) + c(3, 2, 1, 4)), g_col = c(as.POSIXct(&quot;2020-09-23 00:00:00&quot;) + 1:4 * 60 * 60 * 24 * 1.1, NA), col_h = list(c(1, 10), c(2, NA), c(3, 8), c(4, 7), c(5, 6)), col_i = list(NULL, pi, month.abb[6:10], iris, as.matrix(mtcars)) ) df ## # A tibble: 5 x 10 ## group a b c d e f_col g_col col_h col_i ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; ## 1 a 1 9 TRUE A tiny NA 2020-09-24 02:24:00 &lt;dbl [2]&gt; &lt;NULL&gt; ## 2 a 4 NA FALSE B small 2020-09-26 2020-09-25 04:48:00 &lt;dbl [2]&gt; &lt;dbl [1]&gt; ## 3 b NA 8 NA C medium 2020-09-25 2020-09-26 07:12:00 &lt;dbl [2]&gt; &lt;chr [5]&gt; ## 4 b 3 10 FALSE &lt;NA&gt; big 2020-09-24 2020-09-27 09:36:00 &lt;dbl [2]&gt; &lt;df[,5] [150 × 5]&gt; ## 5 b 5 7 TRUE E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; glimpse(df) ## Rows: 5 ## Columns: 10 ## $ group &lt;chr&gt; &quot;a&quot;, &quot;a&quot;, &quot;b&quot;, &quot;b&quot;, &quot;b&quot; ## $ a &lt;dbl&gt; 1, 4, NA, 3, 5 ## $ b &lt;dbl&gt; 9, NA, 8, 10, 7 ## $ c &lt;lgl&gt; TRUE, FALSE, NA, FALSE, TRUE ## $ d &lt;chr&gt; &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, NA, &quot;E&quot; ## $ e &lt;fct&gt; tiny, small, medium, big, huge ## $ f_col &lt;date&gt; NA, 2020-09-26, 2020-09-25, 2020-09-24, 2020-09-27 ## $ g_col &lt;dttm&gt; 2020-09-24 02:24:00, 2020-09-25 04:48:00, 2020-09-26 07:12:00, 2020-09-27 09:36:00, NA ## $ col_h &lt;list&gt; [&lt;1, 10&gt;, &lt;2, NA&gt;, &lt;3, 8&gt;, &lt;4, 7&gt;, &lt;5, 6&gt;] ## $ col_i &lt;list&gt; [NULL, 3.141593, &lt;&quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;&gt;, &lt;data.frame[150 x 5]&gt;, &lt;matrix[32 x 11]&gt;] 3.1 select() Columns 3.1.1 by Name df %&gt;% select(a) ## # A tibble: 5 x 1 ## a ## &lt;dbl&gt; ## 1 1 ## 2 4 ## 3 NA ## 4 3 ## 5 5 df %&gt;% select(a, c, e) ## # A tibble: 5 x 3 ## a c e ## &lt;dbl&gt; &lt;lgl&gt; &lt;fct&gt; ## 1 1 TRUE tiny ## 2 4 FALSE small ## 3 NA NA medium ## 4 3 FALSE big ## 5 5 TRUE huge df %&gt;% select(b, d, f_col) ## # A tibble: 5 x 3 ## b d f_col ## &lt;dbl&gt; &lt;chr&gt; &lt;date&gt; ## 1 9 A NA ## 2 NA B 2020-09-26 ## 3 8 C 2020-09-25 ## 4 10 &lt;NA&gt; 2020-09-24 ## 5 7 E 2020-09-27 df %&gt;% select(b, c, everything()) ## # A tibble: 5 x 10 ## b c group a d e f_col g_col col_h col_i ## &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; ## 1 9 TRUE a 1 A tiny NA 2020-09-24 02:24:00 &lt;dbl [2]&gt; &lt;NULL&gt; ## 2 NA FALSE a 4 B small 2020-09-26 2020-09-25 04:48:00 &lt;dbl [2]&gt; &lt;dbl [1]&gt; ## 3 8 NA b NA C medium 2020-09-25 2020-09-26 07:12:00 &lt;dbl [2]&gt; &lt;chr [5]&gt; ## 4 10 FALSE b 3 &lt;NA&gt; big 2020-09-24 2020-09-27 09:36:00 &lt;dbl [2]&gt; &lt;df[,5] [150 × 5]&gt; ## 5 7 TRUE b 5 E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; df %&gt;% select(b, c, everything(), -a) ## # A tibble: 5 x 9 ## b c group d e f_col g_col col_h col_i ## &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; ## 1 9 TRUE a A tiny NA 2020-09-24 02:24:00 &lt;dbl [2]&gt; &lt;NULL&gt; ## 2 NA FALSE a B small 2020-09-26 2020-09-25 04:48:00 &lt;dbl [2]&gt; &lt;dbl [1]&gt; ## 3 8 NA b C medium 2020-09-25 2020-09-26 07:12:00 &lt;dbl [2]&gt; &lt;chr [5]&gt; ## 4 10 FALSE b &lt;NA&gt; big 2020-09-24 2020-09-27 09:36:00 &lt;dbl [2]&gt; &lt;df[,5] [150 × 5]&gt; ## 5 7 TRUE b E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; cols_to_select &lt;- c(&quot;a&quot;, &quot;c&quot;, &quot;e&quot;) df %&gt;% select(all_of(cols_to_select)) ## # A tibble: 5 x 3 ## a c e ## &lt;dbl&gt; &lt;lgl&gt; &lt;fct&gt; ## 1 1 TRUE tiny ## 2 4 FALSE small ## 3 NA NA medium ## 4 3 FALSE big ## 5 5 TRUE huge 3.1.2 by Index df %&gt;% select(1L) ## # A tibble: 5 x 1 ## group ## &lt;chr&gt; ## 1 a ## 2 a ## 3 b ## 4 b ## 5 b df %&gt;% select(1, 3, 5) ## # A tibble: 5 x 3 ## group b d ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 a 9 A ## 2 a NA B ## 3 b 8 C ## 4 b 10 &lt;NA&gt; ## 5 b 7 E df %&gt;% select(2, 4, 6) ## # A tibble: 5 x 3 ## a c e ## &lt;dbl&gt; &lt;lgl&gt; &lt;fct&gt; ## 1 1 TRUE tiny ## 2 4 FALSE small ## 3 NA NA medium ## 4 3 FALSE big ## 5 5 TRUE huge df %&gt;% select(2:3, everything()) ## # A tibble: 5 x 10 ## a b group c d e f_col g_col col_h col_i ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; ## 1 1 9 a TRUE A tiny NA 2020-09-24 02:24:00 &lt;dbl [2]&gt; &lt;NULL&gt; ## 2 4 NA a FALSE B small 2020-09-26 2020-09-25 04:48:00 &lt;dbl [2]&gt; &lt;dbl [1]&gt; ## 3 NA 8 b NA C medium 2020-09-25 2020-09-26 07:12:00 &lt;dbl [2]&gt; &lt;chr [5]&gt; ## 4 3 10 b FALSE &lt;NA&gt; big 2020-09-24 2020-09-27 09:36:00 &lt;dbl [2]&gt; &lt;df[,5] [150 × 5]&gt; ## 5 5 7 b TRUE E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; df %&gt;% select(2:3, everything(), -1) ## # A tibble: 5 x 9 ## a b c d e f_col g_col col_h col_i ## &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; ## 1 1 9 TRUE A tiny NA 2020-09-24 02:24:00 &lt;dbl [2]&gt; &lt;NULL&gt; ## 2 4 NA FALSE B small 2020-09-26 2020-09-25 04:48:00 &lt;dbl [2]&gt; &lt;dbl [1]&gt; ## 3 NA 8 NA C medium 2020-09-25 2020-09-26 07:12:00 &lt;dbl [2]&gt; &lt;chr [5]&gt; ## 4 3 10 FALSE &lt;NA&gt; big 2020-09-24 2020-09-27 09:36:00 &lt;dbl [2]&gt; &lt;df[,5] [150 × 5]&gt; ## 5 5 7 TRUE E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; cols_to_select &lt;- c(1, 3, 5) df %&gt;% select(all_of(cols_to_select)) ## # A tibble: 5 x 3 ## group b d ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 a 9 A ## 2 a NA B ## 3 b 8 C ## 4 b 10 &lt;NA&gt; ## 5 b 7 E cols_to_select &lt;- c(1, 3, 5, 1000) df %&gt;% select(any_of(cols_to_select)) ## # A tibble: 5 x 3 ## group b d ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 a 9 A ## 2 a NA B ## 3 b 8 C ## 4 b 10 &lt;NA&gt; ## 5 b 7 E 3.1.3 by Name Pattern contains() selects a column if any part of its name contains match=. df %&gt;% select(contains(match = &quot;col&quot;)) ## # A tibble: 5 x 4 ## f_col g_col col_h col_i ## &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; ## 1 NA 2020-09-24 02:24:00 &lt;dbl [2]&gt; &lt;NULL&gt; ## 2 2020-09-26 2020-09-25 04:48:00 &lt;dbl [2]&gt; &lt;dbl [1]&gt; ## 3 2020-09-25 2020-09-26 07:12:00 &lt;dbl [2]&gt; &lt;chr [5]&gt; ## 4 2020-09-24 2020-09-27 09:36:00 &lt;dbl [2]&gt; &lt;df[,5] [150 × 5]&gt; ## 5 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; starts_with() selects a column if its name starts with match=. df %&gt;% select(starts_with(&quot;col_&quot;)) ## # A tibble: 5 x 2 ## col_h col_i ## &lt;list&gt; &lt;list&gt; ## 1 &lt;dbl [2]&gt; &lt;NULL&gt; ## 2 &lt;dbl [2]&gt; &lt;dbl [1]&gt; ## 3 &lt;dbl [2]&gt; &lt;chr [5]&gt; ## 4 &lt;dbl [2]&gt; &lt;df[,5] [150 × 5]&gt; ## 5 &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; starts_with() selects a column if its name ends with match=. df %&gt;% select(ends_with(&quot;_col&quot;)) ## # A tibble: 5 x 2 ## f_col g_col ## &lt;date&gt; &lt;dttm&gt; ## 1 NA 2020-09-24 02:24:00 ## 2 2020-09-26 2020-09-25 04:48:00 ## 3 2020-09-25 2020-09-26 07:12:00 ## 4 2020-09-24 2020-09-27 09:36:00 ## 5 2020-09-27 NA matches()s Selects a column if its name matches a regular expression pattern. df %&gt;% select(matches(&quot;(^\\\\w_)?col(_\\\\w)?&quot;)) ## # A tibble: 5 x 4 ## f_col g_col col_h col_i ## &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; ## 1 NA 2020-09-24 02:24:00 &lt;dbl [2]&gt; &lt;NULL&gt; ## 2 2020-09-26 2020-09-25 04:48:00 &lt;dbl [2]&gt; &lt;dbl [1]&gt; ## 3 2020-09-25 2020-09-26 07:12:00 &lt;dbl [2]&gt; &lt;chr [5]&gt; ## 4 2020-09-24 2020-09-27 09:36:00 &lt;dbl [2]&gt; &lt;df[,5] [150 × 5]&gt; ## 5 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; 3.1.4 by Data Type df %&gt;% select(where(is.factor)) ## # A tibble: 5 x 1 ## e ## &lt;fct&gt; ## 1 tiny ## 2 small ## 3 medium ## 4 big ## 5 huge df %&gt;% select_if(is.factor) ## # A tibble: 5 x 1 ## e ## &lt;fct&gt; ## 1 tiny ## 2 small ## 3 medium ## 4 big ## 5 huge df %&gt;% select(where(is.factor), f_col) ## # A tibble: 5 x 2 ## e f_col ## &lt;fct&gt; &lt;date&gt; ## 1 tiny NA ## 2 small 2020-09-26 ## 3 medium 2020-09-25 ## 4 big 2020-09-24 ## 5 huge 2020-09-27 df %&gt;% select(a, !where(is.integer)) ## # A tibble: 5 x 10 ## a group b c d e f_col g_col col_h col_i ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; ## 1 1 a 9 TRUE A tiny NA 2020-09-24 02:24:00 &lt;dbl [2]&gt; &lt;NULL&gt; ## 2 4 a NA FALSE B small 2020-09-26 2020-09-25 04:48:00 &lt;dbl [2]&gt; &lt;dbl [1]&gt; ## 3 NA b 8 NA C medium 2020-09-25 2020-09-26 07:12:00 &lt;dbl [2]&gt; &lt;chr [5]&gt; ## 4 3 b 10 FALSE &lt;NA&gt; big 2020-09-24 2020-09-27 09:36:00 &lt;dbl [2]&gt; &lt;df[,5] [150 × 5]&gt; ## 5 5 b 7 TRUE E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; df %&gt;% select(where(is.character) | where(is.factor)) ## # A tibble: 5 x 3 ## group d e ## &lt;chr&gt; &lt;chr&gt; &lt;fct&gt; ## 1 a A tiny ## 2 a B small ## 3 b C medium ## 4 b &lt;NA&gt; big ## 5 b E huge df %&gt;% select(where(~ is.double(.) | is.list(.))) ## # A tibble: 5 x 6 ## a b f_col g_col col_h col_i ## &lt;dbl&gt; &lt;dbl&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; ## 1 1 9 NA 2020-09-24 02:24:00 &lt;dbl [2]&gt; &lt;NULL&gt; ## 2 4 NA 2020-09-26 2020-09-25 04:48:00 &lt;dbl [2]&gt; &lt;dbl [1]&gt; ## 3 NA 8 2020-09-25 2020-09-26 07:12:00 &lt;dbl [2]&gt; &lt;chr [5]&gt; ## 4 3 10 2020-09-24 2020-09-27 09:36:00 &lt;dbl [2]&gt; &lt;df[,5] [150 × 5]&gt; ## 5 5 7 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; df %&gt;% select_if(~ is.character(.x) | is.factor(.x)) ## # A tibble: 5 x 3 ## group d e ## &lt;chr&gt; &lt;chr&gt; &lt;fct&gt; ## 1 a A tiny ## 2 a B small ## 3 b C medium ## 4 b &lt;NA&gt; big ## 5 b E huge 3.2 filter() Rows 3.2.1 by row_number() df %&gt;% filter(row_number() == 1) ## # A tibble: 1 x 10 ## group a b c d e f_col g_col col_h col_i ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; ## 1 a 1 9 TRUE A tiny NA 2020-09-24 02:24:00 &lt;dbl [2]&gt; &lt;NULL&gt; df %&gt;% filter(row_number() &gt; 1) ## # A tibble: 4 x 10 ## group a b c d e f_col g_col col_h col_i ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; ## 1 a 4 NA FALSE B small 2020-09-26 2020-09-25 04:48:00 &lt;dbl [2]&gt; &lt;dbl [1]&gt; ## 2 b NA 8 NA C medium 2020-09-25 2020-09-26 07:12:00 &lt;dbl [2]&gt; &lt;chr [5]&gt; ## 3 b 3 10 FALSE &lt;NA&gt; big 2020-09-24 2020-09-27 09:36:00 &lt;dbl [2]&gt; &lt;df[,5] [150 × 5]&gt; ## 4 b 5 7 TRUE E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; 3.2.2 by Name df %&gt;% filter(a == 2) ## # A tibble: 0 x 10 ## # … with 10 variables: group &lt;chr&gt;, a &lt;dbl&gt;, b &lt;dbl&gt;, c &lt;lgl&gt;, d &lt;chr&gt;, e &lt;fct&gt;, f_col &lt;date&gt;, g_col &lt;dttm&gt;, col_h &lt;list&gt;, col_i &lt;list&gt; df %&gt;% filter(a != 2) ## # A tibble: 4 x 10 ## group a b c d e f_col g_col col_h col_i ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; ## 1 a 1 9 TRUE A tiny NA 2020-09-24 02:24:00 &lt;dbl [2]&gt; &lt;NULL&gt; ## 2 a 4 NA FALSE B small 2020-09-26 2020-09-25 04:48:00 &lt;dbl [2]&gt; &lt;dbl [1]&gt; ## 3 b 3 10 FALSE &lt;NA&gt; big 2020-09-24 2020-09-27 09:36:00 &lt;dbl [2]&gt; &lt;df[,5] [150 × 5]&gt; ## 4 b 5 7 TRUE E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; df %&gt;% filter(c) ## # A tibble: 2 x 10 ## group a b c d e f_col g_col col_h col_i ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; ## 1 a 1 9 TRUE A tiny NA 2020-09-24 02:24:00 &lt;dbl [2]&gt; &lt;NULL&gt; ## 2 b 5 7 TRUE E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; df %&gt;% filter(!c) ## # A tibble: 2 x 10 ## group a b c d e f_col g_col col_h col_i ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; ## 1 a 4 NA FALSE B small 2020-09-26 2020-09-25 04:48:00 &lt;dbl [2]&gt; &lt;dbl [1]&gt; ## 2 b 3 10 FALSE &lt;NA&gt; big 2020-09-24 2020-09-27 09:36:00 &lt;dbl [2]&gt; &lt;df[,5] [150 × 5]&gt; df %&gt;% filter(a == 5, d == &quot;E&quot;) ## # A tibble: 1 x 10 ## group a b c d e f_col g_col col_h col_i ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; ## 1 b 5 7 TRUE E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; df %&gt;% filter(a &gt;= 3 | f_col == &quot;2020-09-24&quot;) ## # A tibble: 3 x 10 ## group a b c d e f_col g_col col_h col_i ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; ## 1 a 4 NA FALSE B small 2020-09-26 2020-09-25 04:48:00 &lt;dbl [2]&gt; &lt;dbl [1]&gt; ## 2 b 3 10 FALSE &lt;NA&gt; big 2020-09-24 2020-09-27 09:36:00 &lt;dbl [2]&gt; &lt;df[,5] [150 × 5]&gt; ## 3 b 5 7 TRUE E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; df %&gt;% filter(a &lt; 2 | c) ## # A tibble: 2 x 10 ## group a b c d e f_col g_col col_h col_i ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; ## 1 a 1 9 TRUE A tiny NA 2020-09-24 02:24:00 &lt;dbl [2]&gt; &lt;NULL&gt; ## 2 b 5 7 TRUE E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; df %&gt;% filter(!is.na(a), !is.na(b), !is.na(d)) ## # A tibble: 2 x 10 ## group a b c d e f_col g_col col_h col_i ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; ## 1 a 1 9 TRUE A tiny NA 2020-09-24 02:24:00 &lt;dbl [2]&gt; &lt;NULL&gt; ## 2 b 5 7 TRUE E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; 3.2.3 by Type df %&gt;% filter(across(where(is.numeric), ~ .x &gt;= 5)) ## # A tibble: 1 x 10 ## group a b c d e f_col g_col col_h col_i ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; ## 1 b 5 7 TRUE E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; df %&gt;% filter_if(is.numeric, ~ .x &gt;= 5) ## # A tibble: 1 x 10 ## group a b c d e f_col g_col col_h col_i ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; ## 1 b 5 7 TRUE E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; df %&gt;% filter_if(is.list, ~ map_lgl(.x, ~ !is.null(.x))) ## # A tibble: 4 x 10 ## group a b c d e f_col g_col col_h col_i ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; ## 1 a 4 NA FALSE B small 2020-09-26 2020-09-25 04:48:00 &lt;dbl [2]&gt; &lt;dbl [1]&gt; ## 2 b NA 8 NA C medium 2020-09-25 2020-09-26 07:12:00 &lt;dbl [2]&gt; &lt;chr [5]&gt; ## 3 b 3 10 FALSE &lt;NA&gt; big 2020-09-24 2020-09-27 09:36:00 &lt;dbl [2]&gt; &lt;df[,5] [150 × 5]&gt; ## 4 b 5 7 TRUE E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; 3.3 arrange() Rows df %&gt;% arrange(a) ## # A tibble: 5 x 10 ## group a b c d e f_col g_col col_h col_i ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; ## 1 a 1 9 TRUE A tiny NA 2020-09-24 02:24:00 &lt;dbl [2]&gt; &lt;NULL&gt; ## 2 b 3 10 FALSE &lt;NA&gt; big 2020-09-24 2020-09-27 09:36:00 &lt;dbl [2]&gt; &lt;df[,5] [150 × 5]&gt; ## 3 a 4 NA FALSE B small 2020-09-26 2020-09-25 04:48:00 &lt;dbl [2]&gt; &lt;dbl [1]&gt; ## 4 b 5 7 TRUE E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; ## 5 b NA 8 NA C medium 2020-09-25 2020-09-26 07:12:00 &lt;dbl [2]&gt; &lt;chr [5]&gt; df %&gt;% arrange(desc(a)) ## # A tibble: 5 x 10 ## group a b c d e f_col g_col col_h col_i ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; ## 1 b 5 7 TRUE E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; ## 2 a 4 NA FALSE B small 2020-09-26 2020-09-25 04:48:00 &lt;dbl [2]&gt; &lt;dbl [1]&gt; ## 3 b 3 10 FALSE &lt;NA&gt; big 2020-09-24 2020-09-27 09:36:00 &lt;dbl [2]&gt; &lt;df[,5] [150 × 5]&gt; ## 4 a 1 9 TRUE A tiny NA 2020-09-24 02:24:00 &lt;dbl [2]&gt; &lt;NULL&gt; ## 5 b NA 8 NA C medium 2020-09-25 2020-09-26 07:12:00 &lt;dbl [2]&gt; &lt;chr [5]&gt; "]
]
